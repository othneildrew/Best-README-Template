from flask import Flask, request, jsonify
from elasticsearch import Elasticsearch
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///logs.db'
db = SQLAlchemy(app)
es = Elasticsearch()

class Log(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    level = db.Column(db.String(50))
    message = db.Column(db.Text)
    resourceId = db.Column(db.String(50))
    timestamp = db.Column(db.DateTime)
    traceId = db.Column(db.String(50))
    spanId = db.Column(db.String(50))
    commit = db.Column(db.String(50))
    parentResourceId = db.Column(db.String(50))

    def to_dict(self):
        return {column.name: getattr(self, column.name) for column in self.__table__.columns}

@app.route('/query', methods=['GET'])
def query_logs():
    query = request.args.get('q', '')  # Full-text search query
    level_filter = request.args.get('level', '')  # Level filter
    resourceId_filter = request.args.get('resourceId', '')  # Resource ID filter
    timestamp_start = request.args.get('timestamp_start', '')  # Timestamp start (Bonus)
    timestamp_end = request.args.get('timestamp_end', '')  # Timestamp end (Bonus)

    # Query the relational database
    db_query = Log.query.filter(Log.message.contains(query), Log.level == level_filter,
                                Log.resourceId == resourceId_filter)

    # Apply timestamp filter if provided (Bonus)
    if timestamp_start and timestamp_end:
        timestamp_start = datetime.strptime(timestamp_start, "%Y-%m-%dT%H:%M:%SZ")
        timestamp_end = datetime.strptime(timestamp_end, "%Y-%m-%dT%H:%M:%SZ")
        db_query = db_query.filter(Log.timestamp.between(timestamp_start, timestamp_end))

    db_results = db_query.all()

    # Query Elasticsearch
    es_query = {
        'query': {
            'bool': {
                'must': [
                    {'match': {'message': query}},
                    {'match': {'level': level_filter}},
                    {'match': {'resourceId': resourceId_filter}}
                ]
            }
        }
    }

    # Apply timestamp filter if provided (Bonus)
    if timestamp_start and timestamp_end:
        es_query['query']['bool']['must'].append({'range': {'timestamp': {'gte': timestamp_start, 'lte': timestamp_end}}})

    es_result = es.search(index='logs', body=es_query)
    es_logs = [hit['_source'] for hit in es_result['hits']['hits']]

    # Combine and format the results
    logs = [log.to_dict() for log in db_results] + es_logs

    return jsonify(logs)

if __name__ == '__main__':
    app.run(port=3001)
